# -*-Shell-script-*-
#
# functions	This file contains functions to be used by most or all
#		shell scripts in the /etc/init.d directory.
#

# Make sure umask is sane
umask 022

source /etc/profile

# Set up a default search path.
PATH="$PATH:/usr/local/sbin:/usr/local/bin"
export PATH

# Source function library.
. /etc/init.d/tc-functions

THIS=$(basename "$0")

# Read in our configuration
if [ -z "${BOOTUP:-}" ]; then
  if [ -f /etc/sysconfig/init ]; then
      . /etc/sysconfig/init
  else
    # This all seem confusing? Look in /etc/sysconfig/init,
    # or in /usr/share/doc/initscripts-*/sysconfig.txt
    BOOTUP=color
    RES_COL=60
    MOVE_TO_COL="echo -en \\033[${RES_COL}G"
    SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    SETCOLOR_FAILURE="echo -en \\033[1;31m"
    SETCOLOR_WARNING="echo -en \\033[1;33m"
    SETCOLOR_NORMAL="echo -en \\033[0;39m"
  fi
fi

# tc configs
TC_OPT_BOOT_LOCAL_SH="/opt/bootlocal.sh"

# iptables attributes
IPTABLES_START_BIN="/usr/local/etc/init.d/${IPTABLES}"
IPTABLES_START_CMD="/usr/local/etc/init.d/${IPTABLES} start &"

IPTABLES_DATA="/etc/sysconfig/${IPTABLES}"
IPTABLES_LAST_DATA="${IPTABLES_DATA}.last"
IPTABLES_FALLBACK_DATA="${IPTABLES_DATA}.fallback"
IPTABLES_CONFIG="/etc/sysconfig/${IPTABLES}-config"
IPV=${IPTABLES%tables} # ip for ipv4 | ip6 for ipv6
[ "$IPV" = "ip" ] && _IPV="ipv4" || _IPV="ipv6"
PROC_IPTABLES_NAMES="/proc/net/${IPV}_tables_names"
VAR_SUBSYS_IPTABLES="/var/lock/subsys/${IPTABLES}"
RESTORECON=$(which restorecon 2>/dev/null)
[ ! -x "${RESTORECON}" ] && RESTORECON=/bin/true

# only usable for root
if [ $(/usr/bin/id -u) != 0 ]; then
  echo -n "${IPTABLES}: You can only run ${THIS} by root."; warning; echo
  exit 4
fi

if [ ! -x "/usr/local/sbin/${IPTABLES}" ]; then
  echo -n "${IPTABLES}: /usr/local/sbin/${IPTABLES} does not exist."; warning; echo
  exit 5
fi

# Default firewall configuration:
IPTABLES_MODULES=""
IPTABLES_SAVE_ON_STOP="no"
IPTABLES_SAVE_ON_RESTART="no"
IPTABLES_SAVE_COUNTER="no"
IPTABLES_STATUS_NUMERIC="yes"
IPTABLES_STATUS_VERBOSE="no"
IPTABLES_STATUS_LINENUMBERS="yes"
IPTABLES_SYSCTL_LOAD_LIST=""
IPTABLES_RESTORE_WAIT=600
IPTABLES_RESTORE_WAIT_INTERVAL=1000000

# Load firewall configuration.
# shellcheck source=/etc/sysconfig/iptables-config
[ -f "${IPTABLES_CONFIG}" ] && . "${IPTABLES_CONFIG}"

# Get active tables
NF_TABLES=$(cat "${PROC_IPTABLES_NAMES}" 2>/dev/null)

# Prepare commands for wait options
IPTABLES_CMD="${IPTABLES}"
IPTABLES_SAVE_CMD="${IPTABLES}-save"
IPTABLES_RESTORE_CMD="${IPTABLES}-restore"
if [ ${IPTABLES_RESTORE_WAIT} -ne 0 ]; then
    OPT="--wait ${IPTABLES_RESTORE_WAIT}"
    if [ ${IPTABLES_RESTORE_WAIT_INTERVAL} -lt 1000000 ]; then
        OPT="${OPT} --wait-interval ${IPTABLES_RESTORE_WAIT_INTERVAL}"
    fi
    IPTABLES_CMD="${IPTABLES_CMD} ${OPT}"
    IPTABLES_RESTORE_CMD="${IPTABLES_RESTORE_CMD} ${OPT}"
fi

echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n "  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n "FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_passed() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n "PASSED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

echo_warning() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n "WARNING"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

# Log that something succeeded
success() {
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_success
  return 0
}

# Log that something failed
failure() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_failure
  [ -x /bin/plymouth ] && /bin/plymouth --details
  return $rc
}

# Log that something passed, but may have had errors. Useful for fsck
passed() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_passed
  return $rc
}

# Log a warning
warning() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_warning
  return $rc
}

flush_n_delete() {
  local ret=0

  # Flush firewall rules and delete chains.
  [ ! -e "${PROC_IPTABLES_NAMES}" ] && return 0

  # Check if firewall is configured (has tables)
  [ -z "${NF_TABLES}" ] && return 1

  echo -n "${IPTABLES}: Flushing firewall rules: "
  # For all tables
  for table in ${NF_TABLES}; do
    # Flush firewall rules in  chain.
    ${IPTABLES_CMD} -t "${table}" -F;
    let ret+=$?;

    # Delete firewall user-defined chains.
    ${IPTABLES_CMD} -t "${table}" -X;
    let ret+=$?;

    # Set counter to zero in chain.
    ${IPTABLES_CMD} -t "${table}" -Z;
    let ret+=$?;
  done

  [ ${ret} -eq 0 ] && success || failure
  echo
  return ${ret}
}

set_policy() {
  local ret=0

  # Set policy for configured tables.
  policy=$1

  # Check if iptable module is loaded
  [ ! -e "${PROC_IPTABLES_NAMES}" ] && return 0

  # Check if firewall is configured (has tables)
  tables=$(cat "${PROC_IPTABLES_NAMES}" 2>/dev/null)
  [ -z "${tables}" ] && return 1

  echo -n "${IPTABLES}: Setting chains to policy ${policy}: "
  for table in ${tables}; do
    echo -n "${table} "
    case "${table}" in
      raw)
        ${IPTABLES_CMD} -t raw -P PREROUTING "${policy}" \
          && ${IPTABLES_CMD} -t raw -P OUTPUT "${policy}" \
          || let ret+=1
        ;;
      filter)
        $IPTABLES_CMD -t filter -P INPUT "${policy}" \
          && $IPTABLES_CMD -t filter -P OUTPUT "${policy}" \
          && $IPTABLES_CMD -t filter -P FORWARD "${policy}" \
          || let ret+=1
        ;;
      nat)
        $IPTABLES_CMD -t nat -P PREROUTING "${policy}" \
          && $IPTABLES_CMD -t nat -P POSTROUTING "${policy}" \
          && $IPTABLES_CMD -t nat -P OUTPUT "${policy}" \
          || let ret+=1
        ;;
      mangle)
        $IPTABLES_CMD -t mangle -P PREROUTING "${policy}" \
          && $IPTABLES_CMD -t mangle -P POSTROUTING "${policy}" \
          && $IPTABLES_CMD -t mangle -P INPUT "${policy}" \
          && $IPTABLES_CMD -t mangle -P OUTPUT "${policy}" \
          && $IPTABLES_CMD -t mangle -P FORWARD "${policy}" \
          || let ret+=1
        ;;
      security)
        # Ignore the security table
        ;;
      *)
        let ret+=1
        ;;
    esac
  done

  [ ${ret} -eq 0 ] && success || failure
  echo
  return ${ret}
}

load_sysctl() {
  local ret=0

  # load matched sysctl values
  if [ -f "/etc/sysctl.conf" ]; then
    if [ -n "${IPTABLES_SYSCTL_LOAD_LIST}" ]; then
        echo -ne "${IPTABLES}: Loading sysctl settings: \n"
        for item in ${IPTABLES_SYSCTL_LOAD_LIST}; do
            grep "${item}" "/etc/sysctl.conf" | xargs sysctl -w 2>/dev/null
            let ret+=$?
        done
        [ ${ret} -eq 0 ] && success || failure
        echo
    fi
  fi
  return ${ret}
}

enable() {
    echo "${IPTABLES}: Enable the service, add it from the file: ${TC_OPT_BOOT_LOCAL_SH}"
    grep -q "^${IPTABLES_START_BIN}" "${TC_OPT_BOOT_LOCAL_SH}" || echo "${IPTABLES_START_CMD}" >> "${TC_OPT_BOOT_LOCAL_SH}" || return 1
    ret=$?
    [ $ret -eq 0 ] && success || failure
    echo
    return $ret
}

disable() {
    local ret=0
    echo "${IPTABLES}: Disable the service, remove it from the file: ${TC_OPT_BOOT_LOCAL_SH}"

    if grep -q "^${IPTABLES_START_BIN}" "${TC_OPT_BOOT_LOCAL_SH}"; then
        TMP_FILE=$(mktemp -q "bootlocal.XXXXXX") && chmod 600 "${TMP_FILE}" \
          && grep -v "${IPTABLES_START_CMD}" "${TC_OPT_BOOT_LOCAL_SH}" > "${TMP_FILE}" 2>/dev/null \
          && [ -s "${TMP_FILE}" ] || ret=1

        if [ ${ret} -eq 0 ]; then
          mv -f "${TMP_FILE}" "${TC_OPT_BOOT_LOCAL_SH}" \
          && chmod 775 ${TC_OPT_BOOT_LOCAL_SH} \
          && chown tc:staff ${TC_OPT_BOOT_LOCAL_SH} || ret=1
        fi
    fi

    [ $ret -eq 0 ] && success || failure
    echo
    return $ret
}

start() {
  local ret=0

  # Do not start if there is no config file.
  if [ ! -f "${IPTABLES_DATA}" ]; then
    echo -n "${IPTABLES}: No config file: ${IPTABLES_DATA}"; warning; echo
    return 6
  fi

  # check if ipv6 module load is deactivated
  if [ "${_IPV}" = "ipv6" ] \
    && grep -qIsE "^install[[:space:]]+${_IPV}[[:space:]]+/bin/(true|false)" /etc/modprobe.conf /etc/modprobe.d/* ; then
      echo "${IPTABLES}: ${_IPV} is disabled."
    return 150
  fi

  echo ""
  echo -n "${IPTABLES}: Applying firewall rules: "

  OPT=
  [ "x${IPTABLES_SAVE_COUNTER}" = "xyes" ] && OPT="-c"

  # restore the last configuration
  ${IPTABLES_RESTORE_CMD} ${OPT} "${IPTABLES_DATA}"
  if [ $? -eq 0 ]; then
    success; echo
  else
    failure; echo;
    if [ -f "${IPTABLES_FALLBACK_DATA}" ]; then
      echo -n "${IPTABLES}: Applying firewall fallback rules: "
      ${IPTABLES_RESTORE_CMD} ${OPT} "${IPTABLES_FALLBACK_DATA}"
      if [ $? -eq 0 ]; then
        success; echo
      else
        failure; echo; return 1
      fi
    else
      return 1
    fi
  fi

  # Load additional modules (helpers)
  if [ -n "${IPTABLES_MODULES}" ]; then
      echo -n "${IPTABLES}: Loading additional modules: "
      for mod in ${IPTABLES_MODULES}; do
        echo -n "${mod} "
        modprobe "${mod}" > /dev/null 2>&1
        let ret+=$?;
      done
      [ ${ret} -eq 0 ] && success || failure
      echo
  fi

  # Load sysctl settings
  load_sysctl

  touch ${VAR_SUBSYS_IPTABLES}
  return ${ret}
}

stop() {
  local ret=0

  # Do not stop if iptables module is not loaded.
  [ ! -e "${PROC_IPTABLES_NAMES}" ] && return 0

  # Set default chain policy to ACCEPT, in order to not break shutdown
  # on systems where the default policy is DROP and root device is network-based (i.e.: iSCSI, NFS)
  set_policy ACCEPT
  let ret+=$?
  # And then, flush the rules and delete chains
  flush_n_delete
  let ret+=$?

  rm -f "${VAR_SUBSYS_IPTABLES}"
  return ${ret}
}

save() {
  local ret=0

  # Check if iptable module is loaded
  if [ ! -e "${PROC_IPTABLES_NAMES}" ]; then
    echo -n "${IPTABLES}: Nothing to save."; warning; echo
    return 0
  fi

  # Check if firewall is configured (has tables)
  if [ -z "${NF_TABLES}" ]; then
    echo -n "${IPTABLES}: Nothing to save."; warning; echo
    return 6
  fi

  echo -n "${IPTABLES}: Saving firewall rules to ${IPTABLES_DATA}: "

  OPT=
  [ "x${IPTABLES_SAVE_COUNTER}" = "xyes" ] && OPT="-c"

  TMP_FILE=$(/bin/mktemp -q "${IPTABLES_DATA}.XXXXXX") && chmod 600 "${TMP_FILE}" \
    && ${IPTABLES_SAVE_CMD} ${OPT} > "${TMP_FILE}" 2>/dev/null \
    && size=$(wc -c "${TMP_FILE}"|awk '{print $1}') && [ ${size} -gt 0 ] || ret=1

  if [ ${ret} -eq 0 ]; then
    if [ -e "${IPTABLES_DATA}" ]; then
        cp -f "${IPTABLES_DATA}" "${IPTABLES_LAST_DATA}" && chmod 600 "${IPTABLES_LAST_DATA}" && ${RESTORECON} "${IPTABLES_LAST_DATA}" || ret=1
    fi
    if [ ${ret} -eq 0 ]; then
        mv -f "${TMP_FILE}" "${IPTABLES_DATA}" && chmod 600 ${IPTABLES_DATA} && ${RESTORECON} ${IPTABLES_DATA} || ret=1
    fi
  fi

  rm -f "${TMP_FILE}"
  [ ${ret} -eq 0 ] && success || failure
  echo
  return ${ret}
}

status() {
  if [ ! -f "${VAR_SUBSYS_IPTABLES}" ] && [ -z "${NF_TABLES}" ]; then
    echo "${IPTABLES}: Firewall is not running."
    return 3
  fi

  # Do not print status if lockfile is missing and iptables modules are not
  # loaded.
  # Check if iptable modules are loaded
  if [ ! -e "${PROC_IPTABLES_NAMES}" ]; then
    echo "${IPTABLES}: Firewall modules are not loaded."
    return 3
  fi

  # Check if firewall is configured (has tables)
  if [ -z "${NF_TABLES}" ]; then
    echo "${IPTABLES}: Firewall is not configured. "
    return 3
  fi

  NUM=
  [ "x${IPTABLES_STATUS_NUMERIC}" = "xyes" ] && NUM="-n"
  VERBOSE=
  [ "x${IPTABLES_STATUS_VERBOSE}" = "xyes" ] && VERBOSE="--verbose"
  COUNT=
  [ "x${IPTABLES_STATUS_LINENUMBERS}" = "xyes" ] && COUNT="--line-numbers"

  for table in ${NF_TABLES}; do
    echo "Table: ${table}"
    ${IPTABLES_CMD} -t "${table}" --list ${NUM} ${VERBOSE} ${COUNT} && echo
  done

  return 0
}

reload() {
  local ret=0

  # Do not reload if there is no config file.
  if [ ! -f "${IPTABLES_DATA}" ]; then
    echo -n "${IPTABLES}: No config file."; warning; echo
    return 6
  fi

  # check if ipv6 module load is deactivated
  if [ "${_IPV}" = "ipv6" ] \
    && grep -qIsE "^install[[:space:]]+${_IPV}[[:space:]]+/bin/(true|false)" /etc/modprobe.conf /etc/modprobe.d/* ; then
    echo "${IPTABLES}: ${_IPV} is disabled."
    return 150
  fi

  echo -n "${IPTABLES}: Trying to reload firewall rules: "

  OPT=
  [ "x${IPTABLES_SAVE_COUNTER}" = "xyes" ] && OPT="-c"

  ${IPTABLES_RESTORE_CMD} ${OPT} "${IPTABLES_DATA}"
  if [ $? -eq 0 ]; then
    success; echo
      else
    failure; echo; echo "Firewall rules are not changed."; return 1
  fi

  # Load additional modules (helpers)
  if [ -n "${IPTABLES_MODULES}" ]; then
    echo -n "${IPTABLES}: Loading additional modules: "
    for mod in ${IPTABLES_MODULES}; do
        echo -n "${mod} "
        modprobe "${mod}" > /dev/null 2>&1
        let ret+=$?;
    done
    [ ${ret} -eq 0 ] && success || failure
    echo
  fi

  # Load sysctl settings
  load_sysctl

  return ${ret}
}

restart() {
  [ "x${IPTABLES_SAVE_ON_RESTART}" = "xyes" ] && save
  stop
  start
}
